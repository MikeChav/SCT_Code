This repository reproduces all the examples in the paper "Separating and 
Collapsing Electoral Control Types" that were computer-generated.

= Requirements =
- A C++ compiler (e.g., GCC <http://gcc.gnu.org>)
- Python 3 <https://www.python.org/>
- Make (e.g., GNU Make <https://www.gnu.org/software/make/>)

= Instructions =

$ make all

will reproduce all examples. These are stored as JSON files, each having a field 
"V" that is a list of lists. Each list should be interpreted as a linear order 
of the candidates, i.e., a vote.

Sample files are provided in the examples folder, and each generated example 
should match the "C" and "V" fields of its corresponding sample file. The sample 
files were generated on a single Intel(R) Core(TM) i7-9750H CPU @ 2.60GHz 
running Linux 5.18.9 with 16 GB or RAM.

= Checker =

The Python scripts that generate random examples will output a witness (a 
candidate and a partition of voters/candidates) for each control type the 
election is found to belong to. In addition to that, we include a separate 
checker that can read the JSON output of the Python generator plus zero or more 
control types and outputs what candidates can witness membership in each control 
type. The requirements to run this checker are:

- Julia <https://julialang.org/>
  - IterTools package
  - JSON package

An example run would be

$ julia Control.jl <plurality|veto> <JSON file> CC-RPC-TP-UW CC-PC-TE-NUW
